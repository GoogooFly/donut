import{_ as e,c as V,o as M,O as a}from"./chunks/framework.bc5c4927.js";const t="/assets/MVVM.56d81025.jpg",o="/assets/MVC.c6107455.jpg",f=JSON.parse('{"title":"理解 MVVM","description":"","frontmatter":{},"headers":[],"relativePath":"guide/basic/Vue/MVVM.md"}'),i={name:"guide/basic/Vue/MVVM.md"},r=a('<h1 id="MVVM" tabindex="-1">理解 MVVM <a class="header-anchor" href="#MVVM" aria-label="Permalink to &quot;理解 MVVM {#MVVM}&quot;">​</a></h1><p><img src="'+t+'" alt="MVVM"></p><h2 id="understand-MVVM" tabindex="-1">如何理解 MVVM <a class="header-anchor" href="#understand-MVVM" aria-label="Permalink to &quot;如何理解 MVVM {#understand-MVVM}&quot;">​</a></h2><p>MVVM 是 Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式</p><ul><li><strong>M</strong>：模型（Model） 对应 data 中的数据</li><li><strong>V</strong>：视图（View） 用户的界面，也就是 DOM</li><li><strong>VM</strong>：视图模型（ViewModel） Vue 实例对象，连接 View 和 Model 的桥梁</li></ul><p>MVVM 的核心是提供对 View 和 ViewModel 的双向数据绑定，当数据变化时，ViewModel 能监听到数据的变化（通过 Data Bindings），自动更新视图，而当用户操作视图，ViewModel 也能监听到视图的变化（DOM Listeners），然后通知数据做改动，这就实现了数据的双向绑定。</p><h2 id="difference-MVC-MVVM" tabindex="-1">MVVM 与 MVC 有什么区别 <a class="header-anchor" href="#difference-MVC-MVVM" aria-label="Permalink to &quot;MVVM 与 MVC 有什么区别 {#difference-MVC-MVVM}&quot;">​</a></h2><p><img src="'+o+'" alt="MVVM"></p><p>都是一种设计思想</p><p>MVC 是 Model-View-Contoller 的简写，即模型-视图-控制器</p><p>MVC 的目的是将 M 和 V 的代码分离</p><p>MVC 是单向通信，也就是 View 和 Model 必须通过 Controller 来承上启下</p><p>MVVM 实现了 View 和 Model 的自动同步，当 Model 的属性改变时，不再需要自己手动操作 DOM，提高了页面渲染性能</p>',13),s=[r];function n(d,l,c,p,_,u){return M(),V("div",null,s)}const m=e(i,[["render",n]]);export{f as __pageData,m as default};
